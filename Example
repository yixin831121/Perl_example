##### MBIST_lib_constructor.pl #####

#!/usr/bin/env perl

# Script      : MBIST_lib_constructor.pl
# Version     : v0r0
# Author      : JeLuen, Ju
# Description : align with MH/MDP's lib folder structure, compose related lib file from central to local database
# KeyWord     : 
# ChangeLog   : v0r0 : 2018 / 05 / 14 --> File Created



# plug-in package declaration
use strict;
use warnings;
no warnings qw(deprecated);
use Switch;
use Term::ANSIColor qw(:constants);

# system setting

	# auto flush I/O buffers
	$| = 1;

	# auto reset text colour
	$Term::ANSIColor::AUTORESET = 1;

# user setting

	my $central_path = "/FSIM/N7_PETV_ISF_central_20181101/ISF2/design/lib/v7/";
	my $target_path = "./sram/";

	# real_flag = 0 --> just checking, skip creating folder structure / copying lib file
	# real_flag = 1 --> real running
	my $real_flag = 1;

# global setting

	my $in_csv_file;

	my $cur_compiler;

	my $in_state = 0;

	my %sram_list;

	my @sub_folder_structure = ("", "DFT", "DFT/CTL", "DFT/MBIST", "LEF", "NLDM", "VERILOG");
	my %target_sram_file;
	$target_sram_file{"ctl"} = "ctl";
	$target_sram_file{"masis"} = "masis";
	$target_sram_file{"lef"} = "lef";
	$target_sram_file{"db"} = "syn/nldm";
	$target_sram_file{"lib"} = "syn/nldm";
	$target_sram_file{"v"} = "vlg";
	my %target_sram_path;
	$target_sram_path{"ctl"} = "DFT/CTL";
	$target_sram_path{"masis"} = "DFT/MBIST";
	$target_sram_path{"lef"} = "LEF";
	$target_sram_path{"db"} = "NLDM";
	$target_sram_path{"lib"} = "NLDM";
	$target_sram_path{"v"} = "VERILOG";

###################### ###################### ######################
#### Initialize . #### #### Initialize . #### #### Initialize . ####
###################### ###################### ######################
INITIALIZER_ENTRY:

my $script_ref_name = $0;
$script_ref_name =~ s/^\S+\/([a-zA-Z0-9_.]+\.pl)$/$1/;

print "\n\n";
print CYAN "[Info]";
print "  Initializing : ";
print MAGENTA $script_ref_name;
print " ...\n\n";

######################
#### Input Argv . ####
######################
if(not defined $ARGV[0])
{
SHOW_USAGE:
	#my $padding_space = "\t" x (int((length($script_ref_name) + 1) / 8) + 2) . " " x int((length($script_ref_name) + 1) % 8);

	print "\n\tUsage : " . $script_ref_name . " \$in_csv_file (fil with configured SRAM type / list / inst. count ... etc.)\n";
	exit -1;
}
else
{
	if((-f $ARGV[0]) && (-r _))
	{
		$in_csv_file = $ARGV[0];
	}
	else
	{
		print RED BOLD "[Error]";
		print " Cannot assign : ";
		print GREEN $ARGV[0];
		print " as in_csv_file, it is either a directory or not readable by effective uid/gid ...\n\n";
	}
}

###################### ###################### ######################
#### Processing . #### #### Processing . #### #### Processing . ####
###################### ###################### ######################
print "\n\n\n\n";
print CYAN "[Info]";
print "  Processing ";
print GREEN $in_csv_file;
print ", please wait ...\n\n";

open IN_LIST, $in_csv_file
	or die $!;

while(<IN_LIST>)
{
	switch($in_state)
	{
		case 0
		{
			if(/^begin_compiler/)
			{
				$in_state = 1;
			}
			elsif(/Num:,,Type:,([^,]+)/ || /^,\d+,\d+,[^,]+/ || /^end_compiler/)
			{
				print RED BOLD "[Error]";
				print " Parser error in in_csv_file : ";
				print GREEN $in_csv_file;
				print ", in line : ";
				print BLUE $.;
				print ", in script line : ";
				print BLUE __LINE__;
				print ", terminating ...\n\n";

				exit -1;
			}
		}
		case 1
		{
			if(/Num:,,Type:,([^,]+)/)
			{
				print "\n";
				print CYAN "[Info]";
				print "  processing compiler : " . $1 . "\n\n";

				$cur_compiler = $1;

				if(not -e $target_path . $cur_compiler)
				{
					print "\t";
					print CYAN "[Info]";
					print "  creating directory : ";
					print GREEN $target_path . $cur_compiler;
					print " ...\n\n";

					system("mkdir " . $target_path . $cur_compiler) if($real_flag eq 1);
				}
				else
				{
					print "\t";
					print CYAN "[Info]";
					print "  directory : ";
					print GREEN $target_path . $cur_compiler;
					print " already existed. skip creating directory ...\n\n";
				}

				$in_state = 2;
			}
			elsif(/^\d+,\d+,\d+,[^,]+/ || /^begin_compiler/ || /^end_compiler/)
			{
				print RED BOLD "[Error]";
				print " Parser error in in_csv_file : ";
				print GREEN $in_csv_file;
				print ", in line : ";
				print BLUE $.;
				print ", in script line : ";
				print BLUE __LINE__;
				print ", terminating ...\n\n";

				exit -1;
			}
		}
		case 2
		{
			if(/^\d+,\d+,\d+,([^,]+)/)
			{
				if(defined $sram_list{$1})
				{
					if($sram_list{$1} ne $cur_compiler)
					{
						print "\t";
						print YELLOW BOLD "[Warn]";
						print "  sram : ";
						print BLUE $1;
						print " is defined in multiple compiler list, i.e., ";
						print BLUE $sram_list{$1};
						print ", ";
						print BLUE $cur_compiler;
						print ", it is highly recommended to check your csv file ...\n\n";
					}
				}
				else
				{
					$sram_list{$1} = $cur_compiler;

					print "\n\t";
					print CYAN "[Info]";
					print "  processing memory : " . $1 . "\n\n";
	
					foreach my $sub_folder_structure_content (@sub_folder_structure)
					{
						if(not -e $target_path . $cur_compiler . "/" . $1 . "/" . $sub_folder_structure_content)
						{
							print "\t\t";
							print CYAN "[Info]";
							print "  creating directory : ";
							print GREEN $target_path . $cur_compiler . "/" . $1 . "/" . $sub_folder_structure_content;
							print " ...\n";
							
							system("mkdir " . $target_path . $cur_compiler . "/" . $1 . "/" . $sub_folder_structure_content) if($real_flag eq 1);
						}
						else
						{
							print "\t\t";
							print CYAN "[Info]";
							print "  directory : ";
							print GREEN $target_path . $cur_compiler . "/" . $1 . "/" . $sub_folder_structure_content;
							print " already existed. skip creating directory ...\n";
						}
					}
	
					print "\n";
	
					foreach my $target_sram_file_key (keys %target_sram_file)
					{
						my $exec_cmd = "find " . $central_path . $target_sram_file{$target_sram_file_key} . " -iname " . "\"" . $1 . "*." . $target_sram_file_key . "\"";
						my @target_list = `$exec_cmd`;
	
						if($#target_list eq "-1")
						{
							print "\n\t\t";
							print RED BOLD "[Error]";
							print " No any available " . $target_sram_file_key . " file found ...\n\n";
						}
						else
						{
							print "\n\t\t";
							print CYAN "[Info]";
							print "  copying " . $target_sram_file_key . " file ...\n";
							foreach my $target_list_content (@target_list)
							{
								chomp($target_list_content);
								print "\t\t\t--> " . $target_list_content . "\n";
								system("cp -L " . $target_list_content . " " . $target_path . $cur_compiler . "/" . $1 . "/" . $target_sram_path{$target_sram_file_key}) if($real_flag eq 1);
							}
						}
					}
				}
			}
			elsif(/^end_compiler/)
			{
				$in_state = 0;
			}
			elsif(/Num:,,Type:,([^,]+)/ || /^begin_compiler/)
			{
				print RED BOLD "[Error]";
				print " Parser error in in_csv_file : ";
				print GREEN $in_csv_file;
				print ", in line : ";
				print BLUE $.;
				print ", in script line : ";
				print BLUE __LINE__;
				print ", terminating ...\n\n";

				exit -1;
			}
		}
	}
}

close IN_LIST
	or warn $!;

####################

#####
